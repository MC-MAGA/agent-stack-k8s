// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package api

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// Build includes the GraphQL fields of Build requested by the fragment Build.
// The GraphQL type's documentation follows.
//
// A build from a pipeline
type Build struct {
	// The UUID for the build
	Uuid string `json:"uuid"`
	Id   string `json:"id"`
	// The number of the build
	Number int `json:"number"`
	// The current state of the build
	State BuildStates            `json:"state"`
	Jobs  BuildJobsJobConnection `json:"jobs"`
}

// GetUuid returns Build.Uuid, and is useful for accessing the field via an interface.
func (v *Build) GetUuid() string { return v.Uuid }

// GetId returns Build.Id, and is useful for accessing the field via an interface.
func (v *Build) GetId() string { return v.Id }

// GetNumber returns Build.Number, and is useful for accessing the field via an interface.
func (v *Build) GetNumber() int { return v.Number }

// GetState returns Build.State, and is useful for accessing the field via an interface.
func (v *Build) GetState() BuildStates { return v.State }

// GetJobs returns Build.Jobs, and is useful for accessing the field via an interface.
func (v *Build) GetJobs() BuildJobsJobConnection { return v.Jobs }

// Author for a build
type BuildAuthorInput struct {
	// The email for the build author
	Email string `json:"email"`
	// The name for the build author
	Name string `json:"name"`
}

// GetEmail returns BuildAuthorInput.Email, and is useful for accessing the field via an interface.
func (v *BuildAuthorInput) GetEmail() string { return v.Email }

// GetName returns BuildAuthorInput.Name, and is useful for accessing the field via an interface.
func (v *BuildAuthorInput) GetName() string { return v.Name }

// BuildCancelBuildCancelBuildCancelPayload includes the requested fields of the GraphQL type BuildCancelPayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of BuildCancel.
type BuildCancelBuildCancelBuildCancelPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId"`
}

// GetClientMutationId returns BuildCancelBuildCancelBuildCancelPayload.ClientMutationId, and is useful for accessing the field via an interface.
func (v *BuildCancelBuildCancelBuildCancelPayload) GetClientMutationId() string {
	return v.ClientMutationId
}

// Autogenerated input type of BuildCancel
type BuildCancelInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId"`
	Id               string `json:"id"`
}

// GetClientMutationId returns BuildCancelInput.ClientMutationId, and is useful for accessing the field via an interface.
func (v *BuildCancelInput) GetClientMutationId() string { return v.ClientMutationId }

// GetId returns BuildCancelInput.Id, and is useful for accessing the field via an interface.
func (v *BuildCancelInput) GetId() string { return v.Id }

// BuildCancelResponse is returned by BuildCancel on success.
type BuildCancelResponse struct {
	// Cancel a build.
	BuildCancel BuildCancelBuildCancelBuildCancelPayload `json:"buildCancel"`
}

// GetBuildCancel returns BuildCancelResponse.BuildCancel, and is useful for accessing the field via an interface.
func (v *BuildCancelResponse) GetBuildCancel() BuildCancelBuildCancelBuildCancelPayload {
	return v.BuildCancel
}

// BuildCreateBuildCreateBuildCreatePayload includes the requested fields of the GraphQL type BuildCreatePayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of BuildCreate.
type BuildCreateBuildCreateBuildCreatePayload struct {
	Build BuildCreateBuildCreateBuildCreatePayloadBuild `json:"build"`
}

// GetBuild returns BuildCreateBuildCreateBuildCreatePayload.Build, and is useful for accessing the field via an interface.
func (v *BuildCreateBuildCreateBuildCreatePayload) GetBuild() BuildCreateBuildCreateBuildCreatePayloadBuild {
	return v.Build
}

// BuildCreateBuildCreateBuildCreatePayloadBuild includes the requested fields of the GraphQL type Build.
// The GraphQL type's documentation follows.
//
// A build from a pipeline
type BuildCreateBuildCreateBuildCreatePayloadBuild struct {
	Build `json:"-"`
}

// GetUuid returns BuildCreateBuildCreateBuildCreatePayloadBuild.Uuid, and is useful for accessing the field via an interface.
func (v *BuildCreateBuildCreateBuildCreatePayloadBuild) GetUuid() string { return v.Build.Uuid }

// GetId returns BuildCreateBuildCreateBuildCreatePayloadBuild.Id, and is useful for accessing the field via an interface.
func (v *BuildCreateBuildCreateBuildCreatePayloadBuild) GetId() string { return v.Build.Id }

// GetNumber returns BuildCreateBuildCreateBuildCreatePayloadBuild.Number, and is useful for accessing the field via an interface.
func (v *BuildCreateBuildCreateBuildCreatePayloadBuild) GetNumber() int { return v.Build.Number }

// GetState returns BuildCreateBuildCreateBuildCreatePayloadBuild.State, and is useful for accessing the field via an interface.
func (v *BuildCreateBuildCreateBuildCreatePayloadBuild) GetState() BuildStates { return v.Build.State }

// GetJobs returns BuildCreateBuildCreateBuildCreatePayloadBuild.Jobs, and is useful for accessing the field via an interface.
func (v *BuildCreateBuildCreateBuildCreatePayloadBuild) GetJobs() BuildJobsJobConnection {
	return v.Build.Jobs
}

func (v *BuildCreateBuildCreateBuildCreatePayloadBuild) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BuildCreateBuildCreateBuildCreatePayloadBuild
		graphql.NoUnmarshalJSON
	}
	firstPass.BuildCreateBuildCreateBuildCreatePayloadBuild = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Build)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBuildCreateBuildCreateBuildCreatePayloadBuild struct {
	Uuid string `json:"uuid"`

	Id string `json:"id"`

	Number int `json:"number"`

	State BuildStates `json:"state"`

	Jobs BuildJobsJobConnection `json:"jobs"`
}

func (v *BuildCreateBuildCreateBuildCreatePayloadBuild) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BuildCreateBuildCreateBuildCreatePayloadBuild) __premarshalJSON() (*__premarshalBuildCreateBuildCreateBuildCreatePayloadBuild, error) {
	var retval __premarshalBuildCreateBuildCreateBuildCreatePayloadBuild

	retval.Uuid = v.Build.Uuid
	retval.Id = v.Build.Id
	retval.Number = v.Build.Number
	retval.State = v.Build.State
	retval.Jobs = v.Build.Jobs
	return &retval, nil
}

// Autogenerated input type of BuildCreate
type BuildCreateInput struct {
	Author BuildAuthorInput `json:"author"`
	// The branch for the build
	Branch string `json:"branch"`
	// A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId"`
	// The commit for the build
	Commit string `json:"commit"`
	// Environment variables used for the build
	Env []string `json:"env"`
	// The message that is displayed on the build
	Message  string               `json:"message"`
	MetaData []BuildMetaDataInput `json:"metaData"`
	// The GraphQL ID of the pipeline you want to create a build on
	PipelineID string `json:"pipelineID"`
}

// GetAuthor returns BuildCreateInput.Author, and is useful for accessing the field via an interface.
func (v *BuildCreateInput) GetAuthor() BuildAuthorInput { return v.Author }

// GetBranch returns BuildCreateInput.Branch, and is useful for accessing the field via an interface.
func (v *BuildCreateInput) GetBranch() string { return v.Branch }

// GetClientMutationId returns BuildCreateInput.ClientMutationId, and is useful for accessing the field via an interface.
func (v *BuildCreateInput) GetClientMutationId() string { return v.ClientMutationId }

// GetCommit returns BuildCreateInput.Commit, and is useful for accessing the field via an interface.
func (v *BuildCreateInput) GetCommit() string { return v.Commit }

// GetEnv returns BuildCreateInput.Env, and is useful for accessing the field via an interface.
func (v *BuildCreateInput) GetEnv() []string { return v.Env }

// GetMessage returns BuildCreateInput.Message, and is useful for accessing the field via an interface.
func (v *BuildCreateInput) GetMessage() string { return v.Message }

// GetMetaData returns BuildCreateInput.MetaData, and is useful for accessing the field via an interface.
func (v *BuildCreateInput) GetMetaData() []BuildMetaDataInput { return v.MetaData }

// GetPipelineID returns BuildCreateInput.PipelineID, and is useful for accessing the field via an interface.
func (v *BuildCreateInput) GetPipelineID() string { return v.PipelineID }

// BuildCreateResponse is returned by BuildCreate on success.
type BuildCreateResponse struct {
	// Create a build.
	BuildCreate BuildCreateBuildCreateBuildCreatePayload `json:"buildCreate"`
}

// GetBuildCreate returns BuildCreateResponse.BuildCreate, and is useful for accessing the field via an interface.
func (v *BuildCreateResponse) GetBuildCreate() BuildCreateBuildCreateBuildCreatePayload {
	return v.BuildCreate
}

// BuildJobsJobConnection includes the requested fields of the GraphQL type JobConnection.
type BuildJobsJobConnection struct {
	Edges []BuildJobsJobConnectionEdgesJobEdge `json:"edges"`
}

// GetEdges returns BuildJobsJobConnection.Edges, and is useful for accessing the field via an interface.
func (v *BuildJobsJobConnection) GetEdges() []BuildJobsJobConnectionEdgesJobEdge { return v.Edges }

// BuildJobsJobConnectionEdgesJobEdge includes the requested fields of the GraphQL type JobEdge.
type BuildJobsJobConnectionEdgesJobEdge struct {
	Node Job `json:"-"`
}

// GetNode returns BuildJobsJobConnectionEdgesJobEdge.Node, and is useful for accessing the field via an interface.
func (v *BuildJobsJobConnectionEdgesJobEdge) GetNode() Job { return v.Node }

func (v *BuildJobsJobConnectionEdgesJobEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BuildJobsJobConnectionEdgesJobEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.BuildJobsJobConnectionEdgesJobEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalJob(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal BuildJobsJobConnectionEdgesJobEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalBuildJobsJobConnectionEdgesJobEdge struct {
	Node json.RawMessage `json:"node"`
}

func (v *BuildJobsJobConnectionEdgesJobEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BuildJobsJobConnectionEdgesJobEdge) __premarshalJSON() (*__premarshalBuildJobsJobConnectionEdgesJobEdge, error) {
	var retval __premarshalBuildJobsJobConnectionEdgesJobEdge

	{

		dst := &retval.Node
		src := v.Node
		var err error
		*dst, err = __marshalJob(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal BuildJobsJobConnectionEdgesJobEdge.Node: %w", err)
		}
	}
	return &retval, nil
}

// Meta-data key/value pairs for a build
type BuildMetaDataInput struct {
	// The key for this meta-data item
	Key string `json:"key"`
	// The value for this meta-data item
	Value string `json:"value"`
}

// GetKey returns BuildMetaDataInput.Key, and is useful for accessing the field via an interface.
func (v *BuildMetaDataInput) GetKey() string { return v.Key }

// GetValue returns BuildMetaDataInput.Value, and is useful for accessing the field via an interface.
func (v *BuildMetaDataInput) GetValue() string { return v.Value }

// All the possible states a build can be in
type BuildStates string

const (
	// The build is blocked
	BuildStatesBlocked BuildStates = "BLOCKED"
	// The build was canceled
	BuildStatesCanceled BuildStates = "CANCELED"
	// The build is currently being canceled
	BuildStatesCanceling BuildStates = "CANCELING"
	// The build is currently being created
	BuildStatesCreating BuildStates = "CREATING"
	// The build failed
	BuildStatesFailed BuildStates = "FAILED"
	// The build is failing
	BuildStatesFailing BuildStates = "FAILING"
	// The build wasn't run
	BuildStatesNotRun BuildStates = "NOT_RUN"
	// The build passed
	BuildStatesPassed BuildStates = "PASSED"
	// The build is currently running jobs
	BuildStatesRunning BuildStates = "RUNNING"
	// The build has yet to start running jobs
	BuildStatesScheduled BuildStates = "SCHEDULED"
	// The build was skipped
	BuildStatesSkipped BuildStates = "SKIPPED"
)

var AllBuildStates = []BuildStates{
	BuildStatesBlocked,
	BuildStatesCanceled,
	BuildStatesCanceling,
	BuildStatesCreating,
	BuildStatesFailed,
	BuildStatesFailing,
	BuildStatesNotRun,
	BuildStatesPassed,
	BuildStatesRunning,
	BuildStatesScheduled,
	BuildStatesSkipped,
}

// CommandJob includes the GraphQL fields of JobTypeCommand requested by the fragment CommandJob.
// The GraphQL type's documentation follows.
//
// A type of job that runs a command on an agent
type CommandJob struct {
	// The UUID for this job
	Uuid string `json:"uuid"`
}

// GetUuid returns CommandJob.Uuid, and is useful for accessing the field via an interface.
func (v *CommandJob) GetUuid() string { return v.Uuid }

// GetBuildBuild includes the requested fields of the GraphQL type Build.
// The GraphQL type's documentation follows.
//
// A build from a pipeline
type GetBuildBuild struct {
	Build `json:"-"`
}

// GetUuid returns GetBuildBuild.Uuid, and is useful for accessing the field via an interface.
func (v *GetBuildBuild) GetUuid() string { return v.Build.Uuid }

// GetId returns GetBuildBuild.Id, and is useful for accessing the field via an interface.
func (v *GetBuildBuild) GetId() string { return v.Build.Id }

// GetNumber returns GetBuildBuild.Number, and is useful for accessing the field via an interface.
func (v *GetBuildBuild) GetNumber() int { return v.Build.Number }

// GetState returns GetBuildBuild.State, and is useful for accessing the field via an interface.
func (v *GetBuildBuild) GetState() BuildStates { return v.Build.State }

// GetJobs returns GetBuildBuild.Jobs, and is useful for accessing the field via an interface.
func (v *GetBuildBuild) GetJobs() BuildJobsJobConnection { return v.Build.Jobs }

func (v *GetBuildBuild) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetBuildBuild
		graphql.NoUnmarshalJSON
	}
	firstPass.GetBuildBuild = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Build)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetBuildBuild struct {
	Uuid string `json:"uuid"`

	Id string `json:"id"`

	Number int `json:"number"`

	State BuildStates `json:"state"`

	Jobs BuildJobsJobConnection `json:"jobs"`
}

func (v *GetBuildBuild) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetBuildBuild) __premarshalJSON() (*__premarshalGetBuildBuild, error) {
	var retval __premarshalGetBuildBuild

	retval.Uuid = v.Build.Uuid
	retval.Id = v.Build.Id
	retval.Number = v.Build.Number
	retval.State = v.Build.State
	retval.Jobs = v.Build.Jobs
	return &retval, nil
}

// GetBuildResponse is returned by GetBuild on success.
type GetBuildResponse struct {
	// Find a build
	Build GetBuildBuild `json:"build"`
}

// GetBuild returns GetBuildResponse.Build, and is useful for accessing the field via an interface.
func (v *GetBuildResponse) GetBuild() GetBuildBuild { return v.Build }

// GetBuildsPipeline includes the requested fields of the GraphQL type Pipeline.
// The GraphQL type's documentation follows.
//
// A pipeline
type GetBuildsPipeline struct {
	// Returns the builds for this pipeline
	Builds GetBuildsPipelineBuildsBuildConnection `json:"builds"`
}

// GetBuilds returns GetBuildsPipeline.Builds, and is useful for accessing the field via an interface.
func (v *GetBuildsPipeline) GetBuilds() GetBuildsPipelineBuildsBuildConnection { return v.Builds }

// GetBuildsPipelineBuildsBuildConnection includes the requested fields of the GraphQL type BuildConnection.
type GetBuildsPipelineBuildsBuildConnection struct {
	Edges []GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdge `json:"edges"`
}

// GetEdges returns GetBuildsPipelineBuildsBuildConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetBuildsPipelineBuildsBuildConnection) GetEdges() []GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdge {
	return v.Edges
}

// GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdge includes the requested fields of the GraphQL type BuildEdge.
type GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdge struct {
	Node GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild `json:"node"`
}

// GetNode returns GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdge.Node, and is useful for accessing the field via an interface.
func (v *GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdge) GetNode() GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild {
	return v.Node
}

// GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild includes the requested fields of the GraphQL type Build.
// The GraphQL type's documentation follows.
//
// A build from a pipeline
type GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild struct {
	Build `json:"-"`
}

// GetUuid returns GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild.Uuid, and is useful for accessing the field via an interface.
func (v *GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild) GetUuid() string {
	return v.Build.Uuid
}

// GetId returns GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild.Id, and is useful for accessing the field via an interface.
func (v *GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild) GetId() string {
	return v.Build.Id
}

// GetNumber returns GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild.Number, and is useful for accessing the field via an interface.
func (v *GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild) GetNumber() int {
	return v.Build.Number
}

// GetState returns GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild.State, and is useful for accessing the field via an interface.
func (v *GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild) GetState() BuildStates {
	return v.Build.State
}

// GetJobs returns GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild.Jobs, and is useful for accessing the field via an interface.
func (v *GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild) GetJobs() BuildJobsJobConnection {
	return v.Build.Jobs
}

func (v *GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild
		graphql.NoUnmarshalJSON
	}
	firstPass.GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Build)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild struct {
	Uuid string `json:"uuid"`

	Id string `json:"id"`

	Number int `json:"number"`

	State BuildStates `json:"state"`

	Jobs BuildJobsJobConnection `json:"jobs"`
}

func (v *GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild) __premarshalJSON() (*__premarshalGetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild, error) {
	var retval __premarshalGetBuildsPipelineBuildsBuildConnectionEdgesBuildEdgeNodeBuild

	retval.Uuid = v.Build.Uuid
	retval.Id = v.Build.Id
	retval.Number = v.Build.Number
	retval.State = v.Build.State
	retval.Jobs = v.Build.Jobs
	return &retval, nil
}

// GetBuildsResponse is returned by GetBuilds on success.
type GetBuildsResponse struct {
	// Find a pipeline
	Pipeline GetBuildsPipeline `json:"pipeline"`
}

// GetPipeline returns GetBuildsResponse.Pipeline, and is useful for accessing the field via an interface.
func (v *GetBuildsResponse) GetPipeline() GetBuildsPipeline { return v.Pipeline }

// GetJobEventsJob includes the requested fields of the GraphQL interface Job.
//
// GetJobEventsJob is implemented by the following types:
// GetJobEventsJobJobTypeBlock
// GetJobEventsJobJobTypeCommand
// GetJobEventsJobJobTypeTrigger
// GetJobEventsJobJobTypeWait
// The GraphQL type's documentation follows.
//
// Kinds of jobs that can exist on a build
type GetJobEventsJob interface {
	implementsGraphQLInterfaceGetJobEventsJob()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *GetJobEventsJobJobTypeBlock) implementsGraphQLInterfaceGetJobEventsJob()   {}
func (v *GetJobEventsJobJobTypeCommand) implementsGraphQLInterfaceGetJobEventsJob() {}
func (v *GetJobEventsJobJobTypeTrigger) implementsGraphQLInterfaceGetJobEventsJob() {}
func (v *GetJobEventsJobJobTypeWait) implementsGraphQLInterfaceGetJobEventsJob()    {}

func __unmarshalGetJobEventsJob(b []byte, v *GetJobEventsJob) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "JobTypeBlock":
		*v = new(GetJobEventsJobJobTypeBlock)
		return json.Unmarshal(b, *v)
	case "JobTypeCommand":
		*v = new(GetJobEventsJobJobTypeCommand)
		return json.Unmarshal(b, *v)
	case "JobTypeTrigger":
		*v = new(GetJobEventsJobJobTypeTrigger)
		return json.Unmarshal(b, *v)
	case "JobTypeWait":
		*v = new(GetJobEventsJobJobTypeWait)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Job.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetJobEventsJob: "%v"`, tn.TypeName)
	}
}

func __marshalGetJobEventsJob(v *GetJobEventsJob) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetJobEventsJobJobTypeBlock:
		typename = "JobTypeBlock"

		result := struct {
			TypeName string `json:"__typename"`
			*GetJobEventsJobJobTypeBlock
		}{typename, v}
		return json.Marshal(result)
	case *GetJobEventsJobJobTypeCommand:
		typename = "JobTypeCommand"

		result := struct {
			TypeName string `json:"__typename"`
			*GetJobEventsJobJobTypeCommand
		}{typename, v}
		return json.Marshal(result)
	case *GetJobEventsJobJobTypeTrigger:
		typename = "JobTypeTrigger"

		result := struct {
			TypeName string `json:"__typename"`
			*GetJobEventsJobJobTypeTrigger
		}{typename, v}
		return json.Marshal(result)
	case *GetJobEventsJobJobTypeWait:
		typename = "JobTypeWait"

		result := struct {
			TypeName string `json:"__typename"`
			*GetJobEventsJobJobTypeWait
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetJobEventsJob: "%T"`, v)
	}
}

// GetJobEventsJobJobTypeBlock includes the requested fields of the GraphQL type JobTypeBlock.
// The GraphQL type's documentation follows.
//
// A type of job that requires a user to unblock it before proceeding in a build pipeline
type GetJobEventsJobJobTypeBlock struct {
	Typename string `json:"__typename"`
}

// GetTypename returns GetJobEventsJobJobTypeBlock.Typename, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeBlock) GetTypename() string { return v.Typename }

// GetJobEventsJobJobTypeCommand includes the requested fields of the GraphQL type JobTypeCommand.
// The GraphQL type's documentation follows.
//
// A type of job that runs a command on an agent
type GetJobEventsJobJobTypeCommand struct {
	Typename string `json:"__typename"`
	// Job events
	Events GetJobEventsJobJobTypeCommandEventsJobEventConnection `json:"events"`
}

// GetTypename returns GetJobEventsJobJobTypeCommand.Typename, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommand) GetTypename() string { return v.Typename }

// GetEvents returns GetJobEventsJobJobTypeCommand.Events, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommand) GetEvents() GetJobEventsJobJobTypeCommandEventsJobEventConnection {
	return v.Events
}

// GetJobEventsJobJobTypeCommandEventsJobEventConnection includes the requested fields of the GraphQL type JobEventConnection.
type GetJobEventsJobJobTypeCommandEventsJobEventConnection struct {
	Edges []GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdge `json:"edges"`
}

// GetEdges returns GetJobEventsJobJobTypeCommandEventsJobEventConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnection) GetEdges() []GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdge {
	return v.Edges
}

// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdge includes the requested fields of the GraphQL type JobEventEdge.
type GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdge struct {
	Node GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent `json:"-"`
}

// GetNode returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdge.Node, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdge) GetNode() GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent {
	return v.Node
}

func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdge struct {
	Node json.RawMessage `json:"node"`
}

func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdge) __premarshalJSON() (*__premarshalGetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdge, error) {
	var retval __premarshalGetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdge

	{

		dst := &retval.Node
		src := v.Node
		var err error
		*dst, err = __marshalGetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdge.Node: %w", err)
		}
	}
	return &retval, nil
}

// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent includes the requested fields of the GraphQL interface JobEvent.
//
// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent is implemented by the following types:
// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventAssigned
// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventBuildStepUploadCreated
// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventCanceled
// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventFinished
// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventGeneric
// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventReprioritized
// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetried
// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetryFailed
// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackError
// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackFinished
// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackNotification
// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventTimedOut
type GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent interface {
	implementsGraphQLInterfaceGetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	GetId() string
	// GetType returns the interface-field "type" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The type of event
	GetType() JobEventType
	// GetTimestamp returns the interface-field "timestamp" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The time when the event occurred
	GetTimestamp() time.Time
}

func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventAssigned) implementsGraphQLInterfaceGetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent() {
}
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventBuildStepUploadCreated) implementsGraphQLInterfaceGetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent() {
}
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventCanceled) implementsGraphQLInterfaceGetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent() {
}
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventFinished) implementsGraphQLInterfaceGetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent() {
}
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventGeneric) implementsGraphQLInterfaceGetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent() {
}
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventReprioritized) implementsGraphQLInterfaceGetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent() {
}
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetried) implementsGraphQLInterfaceGetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent() {
}
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetryFailed) implementsGraphQLInterfaceGetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent() {
}
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackError) implementsGraphQLInterfaceGetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent() {
}
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackFinished) implementsGraphQLInterfaceGetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent() {
}
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackNotification) implementsGraphQLInterfaceGetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent() {
}
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventTimedOut) implementsGraphQLInterfaceGetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent() {
}

func __unmarshalGetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent(b []byte, v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "JobEventAssigned":
		*v = new(GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventAssigned)
		return json.Unmarshal(b, *v)
	case "JobEventBuildStepUploadCreated":
		*v = new(GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventBuildStepUploadCreated)
		return json.Unmarshal(b, *v)
	case "JobEventCanceled":
		*v = new(GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventCanceled)
		return json.Unmarshal(b, *v)
	case "JobEventFinished":
		*v = new(GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventFinished)
		return json.Unmarshal(b, *v)
	case "JobEventGeneric":
		*v = new(GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventGeneric)
		return json.Unmarshal(b, *v)
	case "JobEventReprioritized":
		*v = new(GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventReprioritized)
		return json.Unmarshal(b, *v)
	case "JobEventRetried":
		*v = new(GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetried)
		return json.Unmarshal(b, *v)
	case "JobEventRetryFailed":
		*v = new(GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetryFailed)
		return json.Unmarshal(b, *v)
	case "JobEventStackError":
		*v = new(GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackError)
		return json.Unmarshal(b, *v)
	case "JobEventStackFinished":
		*v = new(GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackFinished)
		return json.Unmarshal(b, *v)
	case "JobEventStackNotification":
		*v = new(GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackNotification)
		return json.Unmarshal(b, *v)
	case "JobEventTimedOut":
		*v = new(GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventTimedOut)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing JobEvent.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent: "%v"`, tn.TypeName)
	}
}

func __marshalGetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent(v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventAssigned:
		typename = "JobEventAssigned"

		result := struct {
			TypeName string `json:"__typename"`
			*GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventAssigned
		}{typename, v}
		return json.Marshal(result)
	case *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventBuildStepUploadCreated:
		typename = "JobEventBuildStepUploadCreated"

		result := struct {
			TypeName string `json:"__typename"`
			*GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventBuildStepUploadCreated
		}{typename, v}
		return json.Marshal(result)
	case *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventCanceled:
		typename = "JobEventCanceled"

		result := struct {
			TypeName string `json:"__typename"`
			*GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventCanceled
		}{typename, v}
		return json.Marshal(result)
	case *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventFinished:
		typename = "JobEventFinished"

		result := struct {
			TypeName string `json:"__typename"`
			*GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventFinished
		}{typename, v}
		return json.Marshal(result)
	case *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventGeneric:
		typename = "JobEventGeneric"

		result := struct {
			TypeName string `json:"__typename"`
			*GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventGeneric
		}{typename, v}
		return json.Marshal(result)
	case *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventReprioritized:
		typename = "JobEventReprioritized"

		result := struct {
			TypeName string `json:"__typename"`
			*GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventReprioritized
		}{typename, v}
		return json.Marshal(result)
	case *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetried:
		typename = "JobEventRetried"

		result := struct {
			TypeName string `json:"__typename"`
			*GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetried
		}{typename, v}
		return json.Marshal(result)
	case *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetryFailed:
		typename = "JobEventRetryFailed"

		result := struct {
			TypeName string `json:"__typename"`
			*GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetryFailed
		}{typename, v}
		return json.Marshal(result)
	case *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackError:
		typename = "JobEventStackError"

		result := struct {
			TypeName string `json:"__typename"`
			*GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackError
		}{typename, v}
		return json.Marshal(result)
	case *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackFinished:
		typename = "JobEventStackFinished"

		result := struct {
			TypeName string `json:"__typename"`
			*GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackFinished
		}{typename, v}
		return json.Marshal(result)
	case *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackNotification:
		typename = "JobEventStackNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackNotification
		}{typename, v}
		return json.Marshal(result)
	case *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventTimedOut:
		typename = "JobEventTimedOut"

		result := struct {
			TypeName string `json:"__typename"`
			*GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventTimedOut
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEvent: "%T"`, v)
	}
}

// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventAssigned includes the requested fields of the GraphQL type JobEventAssigned.
// The GraphQL type's documentation follows.
//
// An event created when the dispatcher assigns the job to an agent
type GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventAssigned struct {
	Typename string `json:"__typename"`
	Id       string `json:"id"`
	// The type of event
	Type JobEventType `json:"type"`
	// The time when the event occurred
	Timestamp time.Time `json:"timestamp"`
}

// GetTypename returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventAssigned.Typename, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventAssigned) GetTypename() string {
	return v.Typename
}

// GetId returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventAssigned.Id, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventAssigned) GetId() string {
	return v.Id
}

// GetType returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventAssigned.Type, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventAssigned) GetType() JobEventType {
	return v.Type
}

// GetTimestamp returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventAssigned.Timestamp, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventAssigned) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventBuildStepUploadCreated includes the requested fields of the GraphQL type JobEventBuildStepUploadCreated.
// The GraphQL type's documentation follows.
//
// An event created when the job creates new build steps via pipeline upload
type GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventBuildStepUploadCreated struct {
	Typename string `json:"__typename"`
	Id       string `json:"id"`
	// The type of event
	Type JobEventType `json:"type"`
	// The time when the event occurred
	Timestamp time.Time `json:"timestamp"`
}

// GetTypename returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventBuildStepUploadCreated.Typename, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventBuildStepUploadCreated) GetTypename() string {
	return v.Typename
}

// GetId returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventBuildStepUploadCreated.Id, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventBuildStepUploadCreated) GetId() string {
	return v.Id
}

// GetType returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventBuildStepUploadCreated.Type, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventBuildStepUploadCreated) GetType() JobEventType {
	return v.Type
}

// GetTimestamp returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventBuildStepUploadCreated.Timestamp, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventBuildStepUploadCreated) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventCanceled includes the requested fields of the GraphQL type JobEventCanceled.
// The GraphQL type's documentation follows.
//
// An event created when the job is canceled
type GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventCanceled struct {
	Typename string `json:"__typename"`
	Id       string `json:"id"`
	// The type of event
	Type JobEventType `json:"type"`
	// The time when the event occurred
	Timestamp time.Time `json:"timestamp"`
}

// GetTypename returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventCanceled.Typename, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventCanceled) GetTypename() string {
	return v.Typename
}

// GetId returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventCanceled.Id, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventCanceled) GetId() string {
	return v.Id
}

// GetType returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventCanceled.Type, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventCanceled) GetType() JobEventType {
	return v.Type
}

// GetTimestamp returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventCanceled.Timestamp, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventCanceled) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventFinished includes the requested fields of the GraphQL type JobEventFinished.
// The GraphQL type's documentation follows.
//
// An event created when the job is finished
type GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventFinished struct {
	Typename string `json:"__typename"`
	Id       string `json:"id"`
	// The type of event
	Type JobEventType `json:"type"`
	// The time when the event occurred
	Timestamp time.Time `json:"timestamp"`
}

// GetTypename returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventFinished.Typename, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventFinished) GetTypename() string {
	return v.Typename
}

// GetId returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventFinished.Id, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventFinished) GetId() string {
	return v.Id
}

// GetType returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventFinished.Type, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventFinished) GetType() JobEventType {
	return v.Type
}

// GetTimestamp returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventFinished.Timestamp, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventFinished) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventGeneric includes the requested fields of the GraphQL type JobEventGeneric.
// The GraphQL type's documentation follows.
//
// A generic event type that doesn't have any additional meta-information associated with the event
type GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventGeneric struct {
	Typename string `json:"__typename"`
	Id       string `json:"id"`
	// The type of event
	Type JobEventType `json:"type"`
	// The time when the event occurred
	Timestamp time.Time `json:"timestamp"`
}

// GetTypename returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventGeneric.Typename, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventGeneric) GetTypename() string {
	return v.Typename
}

// GetId returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventGeneric.Id, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventGeneric) GetId() string {
	return v.Id
}

// GetType returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventGeneric.Type, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventGeneric) GetType() JobEventType {
	return v.Type
}

// GetTimestamp returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventGeneric.Timestamp, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventGeneric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventReprioritized includes the requested fields of the GraphQL type JobEventReprioritized.
// The GraphQL type's documentation follows.
//
// A job event for when a job's priority has been changed
type GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventReprioritized struct {
	Typename string `json:"__typename"`
	Id       string `json:"id"`
	// The type of event
	Type JobEventType `json:"type"`
	// The time when the event occurred
	Timestamp time.Time `json:"timestamp"`
}

// GetTypename returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventReprioritized.Typename, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventReprioritized) GetTypename() string {
	return v.Typename
}

// GetId returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventReprioritized.Id, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventReprioritized) GetId() string {
	return v.Id
}

// GetType returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventReprioritized.Type, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventReprioritized) GetType() JobEventType {
	return v.Type
}

// GetTimestamp returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventReprioritized.Timestamp, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventReprioritized) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetried includes the requested fields of the GraphQL type JobEventRetried.
// The GraphQL type's documentation follows.
//
// An event created when the job is retried
type GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetried struct {
	Typename string `json:"__typename"`
	Id       string `json:"id"`
	// The type of event
	Type JobEventType `json:"type"`
	// The time when the event occurred
	Timestamp time.Time `json:"timestamp"`
}

// GetTypename returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetried.Typename, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetried) GetTypename() string {
	return v.Typename
}

// GetId returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetried.Id, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetried) GetId() string {
	return v.Id
}

// GetType returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetried.Type, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetried) GetType() JobEventType {
	return v.Type
}

// GetTimestamp returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetried.Timestamp, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetried) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetryFailed includes the requested fields of the GraphQL type JobEventRetryFailed.
// The GraphQL type's documentation follows.
//
// An event created when job fails to retry
type GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetryFailed struct {
	Typename string `json:"__typename"`
	Id       string `json:"id"`
	// The type of event
	Type JobEventType `json:"type"`
	// The time when the event occurred
	Timestamp time.Time `json:"timestamp"`
}

// GetTypename returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetryFailed.Typename, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetryFailed) GetTypename() string {
	return v.Typename
}

// GetId returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetryFailed.Id, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetryFailed) GetId() string {
	return v.Id
}

// GetType returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetryFailed.Type, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetryFailed) GetType() JobEventType {
	return v.Type
}

// GetTimestamp returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetryFailed.Timestamp, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventRetryFailed) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackError includes the requested fields of the GraphQL type JobEventStackError.
// The GraphQL type's documentation follows.
//
// An event created when a stack error is reported
type GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackError struct {
	Typename string `json:"__typename"`
	Id       string `json:"id"`
	// The type of event
	Type JobEventType `json:"type"`
	// The time when the event occurred
	Timestamp time.Time `json:"timestamp"`
	// Details about the stack error
	ErrorDetail string `json:"errorDetail"`
}

// GetTypename returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackError.Typename, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackError) GetTypename() string {
	return v.Typename
}

// GetId returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackError.Id, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackError) GetId() string {
	return v.Id
}

// GetType returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackError.Type, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackError) GetType() JobEventType {
	return v.Type
}

// GetTimestamp returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackError.Timestamp, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackError) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetErrorDetail returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackError.ErrorDetail, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackError) GetErrorDetail() string {
	return v.ErrorDetail
}

// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackFinished includes the requested fields of the GraphQL type JobEventStackFinished.
// The GraphQL type's documentation follows.
//
// An event created when a stack finishes a job and marks it as success
type GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackFinished struct {
	Typename string `json:"__typename"`
	Id       string `json:"id"`
	// The type of event
	Type JobEventType `json:"type"`
	// The time when the event occurred
	Timestamp time.Time `json:"timestamp"`
}

// GetTypename returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackFinished.Typename, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackFinished) GetTypename() string {
	return v.Typename
}

// GetId returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackFinished.Id, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackFinished) GetId() string {
	return v.Id
}

// GetType returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackFinished.Type, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackFinished) GetType() JobEventType {
	return v.Type
}

// GetTimestamp returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackFinished.Timestamp, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackFinished) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackNotification includes the requested fields of the GraphQL type JobEventStackNotification.
// The GraphQL type's documentation follows.
//
// An event created when a stack notification is triggered
type GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackNotification struct {
	Typename string `json:"__typename"`
	Id       string `json:"id"`
	// The type of event
	Type JobEventType `json:"type"`
	// The time when the event occurred
	Timestamp time.Time `json:"timestamp"`
}

// GetTypename returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackNotification.Typename, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackNotification) GetTypename() string {
	return v.Typename
}

// GetId returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackNotification.Id, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackNotification) GetId() string {
	return v.Id
}

// GetType returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackNotification.Type, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackNotification) GetType() JobEventType {
	return v.Type
}

// GetTimestamp returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackNotification.Timestamp, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventStackNotification) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventTimedOut includes the requested fields of the GraphQL type JobEventTimedOut.
// The GraphQL type's documentation follows.
//
// An event created when the job is timed out
type GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventTimedOut struct {
	Typename string `json:"__typename"`
	Id       string `json:"id"`
	// The type of event
	Type JobEventType `json:"type"`
	// The time when the event occurred
	Timestamp time.Time `json:"timestamp"`
}

// GetTypename returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventTimedOut.Typename, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventTimedOut) GetTypename() string {
	return v.Typename
}

// GetId returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventTimedOut.Id, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventTimedOut) GetId() string {
	return v.Id
}

// GetType returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventTimedOut.Type, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventTimedOut) GetType() JobEventType {
	return v.Type
}

// GetTimestamp returns GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventTimedOut.Timestamp, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeCommandEventsJobEventConnectionEdgesJobEventEdgeNodeJobEventTimedOut) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetJobEventsJobJobTypeTrigger includes the requested fields of the GraphQL type JobTypeTrigger.
// The GraphQL type's documentation follows.
//
// A type of job that triggers another build on a pipeline
type GetJobEventsJobJobTypeTrigger struct {
	Typename string `json:"__typename"`
}

// GetTypename returns GetJobEventsJobJobTypeTrigger.Typename, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeTrigger) GetTypename() string { return v.Typename }

// GetJobEventsJobJobTypeWait includes the requested fields of the GraphQL type JobTypeWait.
// The GraphQL type's documentation follows.
//
// A type of job that waits for all previous jobs to pass before proceeding the build pipeline
type GetJobEventsJobJobTypeWait struct {
	Typename string `json:"__typename"`
}

// GetTypename returns GetJobEventsJobJobTypeWait.Typename, and is useful for accessing the field via an interface.
func (v *GetJobEventsJobJobTypeWait) GetTypename() string { return v.Typename }

// GetJobEventsResponse is returned by GetJobEvents on success.
type GetJobEventsResponse struct {
	// Find a build job
	Job GetJobEventsJob `json:"-"`
}

// GetJob returns GetJobEventsResponse.Job, and is useful for accessing the field via an interface.
func (v *GetJobEventsResponse) GetJob() GetJobEventsJob { return v.Job }

func (v *GetJobEventsResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetJobEventsResponse
		Job json.RawMessage `json:"job"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetJobEventsResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Job
		src := firstPass.Job
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetJobEventsJob(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetJobEventsResponse.Job: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetJobEventsResponse struct {
	Job json.RawMessage `json:"job"`
}

func (v *GetJobEventsResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetJobEventsResponse) __premarshalJSON() (*__premarshalGetJobEventsResponse, error) {
	var retval __premarshalGetJobEventsResponse

	{

		dst := &retval.Job
		src := v.Job
		var err error
		*dst, err = __marshalGetJobEventsJob(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetJobEventsResponse.Job: %w", err)
		}
	}
	return &retval, nil
}

// Job includes the GraphQL fields of Job requested by the fragment Job.
// The GraphQL type's documentation follows.
//
// # Kinds of jobs that can exist on a build
//
// Job is implemented by the following types:
// JobJobTypeBlock
// JobJobTypeCommand
// JobJobTypeTrigger
// JobJobTypeWait
type Job interface {
	implementsGraphQLInterfaceJob()
}

func (v *JobJobTypeBlock) implementsGraphQLInterfaceJob()   {}
func (v *JobJobTypeCommand) implementsGraphQLInterfaceJob() {}
func (v *JobJobTypeTrigger) implementsGraphQLInterfaceJob() {}
func (v *JobJobTypeWait) implementsGraphQLInterfaceJob()    {}

func __unmarshalJob(b []byte, v *Job) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "JobTypeBlock":
		*v = new(JobJobTypeBlock)
		return json.Unmarshal(b, *v)
	case "JobTypeCommand":
		*v = new(JobJobTypeCommand)
		return json.Unmarshal(b, *v)
	case "JobTypeTrigger":
		*v = new(JobJobTypeTrigger)
		return json.Unmarshal(b, *v)
	case "JobTypeWait":
		*v = new(JobJobTypeWait)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Job.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for Job: "%v"`, tn.TypeName)
	}
}

func __marshalJob(v *Job) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *JobJobTypeBlock:
		typename = "JobTypeBlock"

		result := struct {
			TypeName string `json:"__typename"`
			*JobJobTypeBlock
		}{typename, v}
		return json.Marshal(result)
	case *JobJobTypeCommand:
		typename = "JobTypeCommand"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalJobJobTypeCommand
		}{typename, premarshaled}
		return json.Marshal(result)
	case *JobJobTypeTrigger:
		typename = "JobTypeTrigger"

		result := struct {
			TypeName string `json:"__typename"`
			*JobJobTypeTrigger
		}{typename, v}
		return json.Marshal(result)
	case *JobJobTypeWait:
		typename = "JobTypeWait"

		result := struct {
			TypeName string `json:"__typename"`
			*JobJobTypeWait
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for Job: "%T"`, v)
	}
}

// All the possible types of events that happen to a Job
type JobEventType string

const (
	// The Job was accepted by an agent
	JobEventTypeAccepted JobEventType = "ACCEPTED"
	// The agent took too long to start the job
	JobEventTypeAcceptedExpired JobEventType = "ACCEPTED_EXPIRED"
	// The agent disconnected while processing this job
	JobEventTypeAgentDisconnected JobEventType = "AGENT_DISCONNECTED"
	// The agent was lost while processing this job
	JobEventTypeAgentLost JobEventType = "AGENT_LOST"
	// The agent was stopped while processing this job
	JobEventTypeAgentStopped JobEventType = "AGENT_STOPPED"
	// The Job was assigned to an agent
	JobEventTypeAssigned JobEventType = "ASSIGNED"
	// The agent took too long to accept the job
	JobEventTypeAssignedExpired JobEventType = "ASSIGNED_EXPIRED"
	// The Job uploaded steps to the current build
	JobEventTypeBuildStepUploadCreated JobEventType = "BUILD_STEP_UPLOAD_CREATED"
	// The Job was marked for cancelation by a user
	JobEventTypeCancelation JobEventType = "CANCELATION"
	// The Job was canceled
	JobEventTypeCanceled JobEventType = "CANCELED"
	// The Job was changed
	JobEventTypeChanged JobEventType = "CHANGED"
	// The Job expired before it was started on an agent
	JobEventTypeExpired JobEventType = "EXPIRED"
	// The Job was finished by an agent
	JobEventTypeFinished JobEventType = "FINISHED"
	// The Job is limited by a concurrency group
	JobEventTypeLimited JobEventType = "LIMITED"
	// The job log exceeded the limit
	JobEventTypeLogSizeLimitExceeded JobEventType = "LOG_SIZE_LIMIT_EXCEEDED"
	// The Job sent a notification
	JobEventTypeNotification JobEventType = "NOTIFICATION"
	// The Job is limited by a platform limit
	JobEventTypePlatformLimited JobEventType = "PLATFORM_LIMITED"
	// The Job's priority was changed
	JobEventTypeReprioritized JobEventType = "REPRIORITIZED"
	// The Job was reserved by a stack for later execution
	JobEventTypeReserved JobEventType = "RESERVED"
	// The Job was reserved by a stack but the stack took too long to spin up agent
	JobEventTypeReservedExpired JobEventType = "RESERVED_EXPIRED"
	// The Job was retried either automatically or by a user
	JobEventTypeRetried JobEventType = "RETRIED"
	// The Job was unable to be retried
	JobEventTypeRetryFailed JobEventType = "RETRY_FAILED"
	// The Job was scheduled
	JobEventTypeScheduled JobEventType = "SCHEDULED"
	// Stack encountered an error handling this job
	JobEventTypeStackErrored JobEventType = "STACK_ERRORED"
	// Stack ends this job without raising error
	JobEventTypeStackFinished JobEventType = "STACK_FINISHED"
	// Stack sent a notification for this job
	JobEventTypeStackNotification JobEventType = "STACK_NOTIFICATION"
	// The Job was started by an agent
	JobEventTypeStarted JobEventType = "STARTED"
	// The Job was timed out
	JobEventTypeTimedOut JobEventType = "TIMED_OUT"
	// The Job was unblocked by a user
	JobEventTypeUnblocked JobEventType = "UNBLOCKED"
)

var AllJobEventType = []JobEventType{
	JobEventTypeAccepted,
	JobEventTypeAcceptedExpired,
	JobEventTypeAgentDisconnected,
	JobEventTypeAgentLost,
	JobEventTypeAgentStopped,
	JobEventTypeAssigned,
	JobEventTypeAssignedExpired,
	JobEventTypeBuildStepUploadCreated,
	JobEventTypeCancelation,
	JobEventTypeCanceled,
	JobEventTypeChanged,
	JobEventTypeExpired,
	JobEventTypeFinished,
	JobEventTypeLimited,
	JobEventTypeLogSizeLimitExceeded,
	JobEventTypeNotification,
	JobEventTypePlatformLimited,
	JobEventTypeReprioritized,
	JobEventTypeReserved,
	JobEventTypeReservedExpired,
	JobEventTypeRetried,
	JobEventTypeRetryFailed,
	JobEventTypeScheduled,
	JobEventTypeStackErrored,
	JobEventTypeStackFinished,
	JobEventTypeStackNotification,
	JobEventTypeStarted,
	JobEventTypeTimedOut,
	JobEventTypeUnblocked,
}

// Job includes the GraphQL fields of JobTypeBlock requested by the fragment Job.
// The GraphQL type's documentation follows.
//
// Kinds of jobs that can exist on a build
type JobJobTypeBlock struct {
}

// Job includes the GraphQL fields of JobTypeCommand requested by the fragment Job.
// The GraphQL type's documentation follows.
//
// Kinds of jobs that can exist on a build
type JobJobTypeCommand struct {
	CommandJob `json:"-"`
}

// GetUuid returns JobJobTypeCommand.Uuid, and is useful for accessing the field via an interface.
func (v *JobJobTypeCommand) GetUuid() string { return v.CommandJob.Uuid }

func (v *JobJobTypeCommand) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*JobJobTypeCommand
		graphql.NoUnmarshalJSON
	}
	firstPass.JobJobTypeCommand = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommandJob)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalJobJobTypeCommand struct {
	Uuid string `json:"uuid"`
}

func (v *JobJobTypeCommand) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *JobJobTypeCommand) __premarshalJSON() (*__premarshalJobJobTypeCommand, error) {
	var retval __premarshalJobJobTypeCommand

	retval.Uuid = v.CommandJob.Uuid
	return &retval, nil
}

// Job includes the GraphQL fields of JobTypeTrigger requested by the fragment Job.
// The GraphQL type's documentation follows.
//
// Kinds of jobs that can exist on a build
type JobJobTypeTrigger struct {
}

// Job includes the GraphQL fields of JobTypeWait requested by the fragment Job.
// The GraphQL type's documentation follows.
//
// Kinds of jobs that can exist on a build
type JobJobTypeWait struct {
}

// Autogenerated input type of PipelineDelete
type PipelineDeleteInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId"`
	Id               string `json:"id"`
}

// GetClientMutationId returns PipelineDeleteInput.ClientMutationId, and is useful for accessing the field via an interface.
func (v *PipelineDeleteInput) GetClientMutationId() string { return v.ClientMutationId }

// GetId returns PipelineDeleteInput.Id, and is useful for accessing the field via an interface.
func (v *PipelineDeleteInput) GetId() string { return v.Id }

// PipelineDeletePipelineDeletePipelineDeletePayload includes the requested fields of the GraphQL type PipelineDeletePayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of PipelineDelete.
type PipelineDeletePipelineDeletePipelineDeletePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId"`
}

// GetClientMutationId returns PipelineDeletePipelineDeletePipelineDeletePayload.ClientMutationId, and is useful for accessing the field via an interface.
func (v *PipelineDeletePipelineDeletePipelineDeletePayload) GetClientMutationId() string {
	return v.ClientMutationId
}

// PipelineDeleteResponse is returned by PipelineDelete on success.
type PipelineDeleteResponse struct {
	// Delete a pipeline.
	PipelineDelete PipelineDeletePipelineDeletePipelineDeletePayload `json:"pipelineDelete"`
}

// GetPipelineDelete returns PipelineDeleteResponse.PipelineDelete, and is useful for accessing the field via an interface.
func (v *PipelineDeleteResponse) GetPipelineDelete() PipelineDeletePipelineDeletePipelineDeletePayload {
	return v.PipelineDelete
}

// SearchPipelinesOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An organization
type SearchPipelinesOrganization struct {
	// Return all the pipelines the current user has access to for this organization
	Pipelines SearchPipelinesOrganizationPipelinesPipelineConnection `json:"pipelines"`
}

// GetPipelines returns SearchPipelinesOrganization.Pipelines, and is useful for accessing the field via an interface.
func (v *SearchPipelinesOrganization) GetPipelines() SearchPipelinesOrganizationPipelinesPipelineConnection {
	return v.Pipelines
}

// SearchPipelinesOrganizationPipelinesPipelineConnection includes the requested fields of the GraphQL type PipelineConnection.
type SearchPipelinesOrganizationPipelinesPipelineConnection struct {
	Edges []SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdge `json:"edges"`
}

// GetEdges returns SearchPipelinesOrganizationPipelinesPipelineConnection.Edges, and is useful for accessing the field via an interface.
func (v *SearchPipelinesOrganizationPipelinesPipelineConnection) GetEdges() []SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdge {
	return v.Edges
}

// SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdge includes the requested fields of the GraphQL type PipelineEdge.
type SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdge struct {
	Node SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdgeNodePipeline `json:"node"`
}

// GetNode returns SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdge.Node, and is useful for accessing the field via an interface.
func (v *SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdge) GetNode() SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdgeNodePipeline {
	return v.Node
}

// SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdgeNodePipeline includes the requested fields of the GraphQL type Pipeline.
// The GraphQL type's documentation follows.
//
// A pipeline
type SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdgeNodePipeline struct {
	Id string `json:"id"`
	// The name of the pipeline
	Name string `json:"name"`
}

// GetId returns SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdgeNodePipeline.Id, and is useful for accessing the field via an interface.
func (v *SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdgeNodePipeline) GetId() string {
	return v.Id
}

// GetName returns SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdgeNodePipeline.Name, and is useful for accessing the field via an interface.
func (v *SearchPipelinesOrganizationPipelinesPipelineConnectionEdgesPipelineEdgeNodePipeline) GetName() string {
	return v.Name
}

// SearchPipelinesResponse is returned by SearchPipelines on success.
type SearchPipelinesResponse struct {
	// Find an organization
	Organization SearchPipelinesOrganization `json:"organization"`
}

// GetOrganization returns SearchPipelinesResponse.Organization, and is useful for accessing the field via an interface.
func (v *SearchPipelinesResponse) GetOrganization() SearchPipelinesOrganization {
	return v.Organization
}

// __BuildCancelInput is used internally by genqlient
type __BuildCancelInput struct {
	Input BuildCancelInput `json:"input"`
}

// GetInput returns __BuildCancelInput.Input, and is useful for accessing the field via an interface.
func (v *__BuildCancelInput) GetInput() BuildCancelInput { return v.Input }

// __BuildCreateInput is used internally by genqlient
type __BuildCreateInput struct {
	Input BuildCreateInput `json:"input"`
}

// GetInput returns __BuildCreateInput.Input, and is useful for accessing the field via an interface.
func (v *__BuildCreateInput) GetInput() BuildCreateInput { return v.Input }

// __GetBuildInput is used internally by genqlient
type __GetBuildInput struct {
	Uuid string `json:"uuid"`
}

// GetUuid returns __GetBuildInput.Uuid, and is useful for accessing the field via an interface.
func (v *__GetBuildInput) GetUuid() string { return v.Uuid }

// __GetBuildsInput is used internally by genqlient
type __GetBuildsInput struct {
	Slug  string        `json:"slug"`
	State []BuildStates `json:"state"`
	First int           `json:"first"`
}

// GetSlug returns __GetBuildsInput.Slug, and is useful for accessing the field via an interface.
func (v *__GetBuildsInput) GetSlug() string { return v.Slug }

// GetState returns __GetBuildsInput.State, and is useful for accessing the field via an interface.
func (v *__GetBuildsInput) GetState() []BuildStates { return v.State }

// GetFirst returns __GetBuildsInput.First, and is useful for accessing the field via an interface.
func (v *__GetBuildsInput) GetFirst() int { return v.First }

// __GetJobEventsInput is used internally by genqlient
type __GetJobEventsInput struct {
	JobId string `json:"jobId"`
}

// GetJobId returns __GetJobEventsInput.JobId, and is useful for accessing the field via an interface.
func (v *__GetJobEventsInput) GetJobId() string { return v.JobId }

// __PipelineDeleteInput is used internally by genqlient
type __PipelineDeleteInput struct {
	Input PipelineDeleteInput `json:"input"`
}

// GetInput returns __PipelineDeleteInput.Input, and is useful for accessing the field via an interface.
func (v *__PipelineDeleteInput) GetInput() PipelineDeleteInput { return v.Input }

// __SearchPipelinesInput is used internally by genqlient
type __SearchPipelinesInput struct {
	Slug   string `json:"slug"`
	Search string `json:"search"`
	First  int    `json:"first"`
}

// GetSlug returns __SearchPipelinesInput.Slug, and is useful for accessing the field via an interface.
func (v *__SearchPipelinesInput) GetSlug() string { return v.Slug }

// GetSearch returns __SearchPipelinesInput.Search, and is useful for accessing the field via an interface.
func (v *__SearchPipelinesInput) GetSearch() string { return v.Search }

// GetFirst returns __SearchPipelinesInput.First, and is useful for accessing the field via an interface.
func (v *__SearchPipelinesInput) GetFirst() int { return v.First }

// The mutation executed by BuildCancel.
const BuildCancel_Operation = `
mutation BuildCancel ($input: BuildCancelInput!) {
	buildCancel(input: $input) {
		clientMutationId
	}
}
`

func BuildCancel(
	ctx_ context.Context,
	client_ graphql.Client,
	input BuildCancelInput,
) (data_ *BuildCancelResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "BuildCancel",
		Query:  BuildCancel_Operation,
		Variables: &__BuildCancelInput{
			Input: input,
		},
	}

	data_ = &BuildCancelResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by BuildCreate.
const BuildCreate_Operation = `
mutation BuildCreate ($input: BuildCreateInput!) {
	buildCreate(input: $input) {
		build {
			... Build
		}
	}
}
fragment Build on Build {
	uuid
	id
	number
	state
	jobs(first: 100) {
		edges {
			node {
				__typename
				... Job
			}
		}
	}
}
fragment Job on Job {
	... on JobTypeCommand {
		... CommandJob
	}
}
fragment CommandJob on JobTypeCommand {
	uuid
}
`

func BuildCreate(
	ctx_ context.Context,
	client_ graphql.Client,
	input BuildCreateInput,
) (data_ *BuildCreateResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "BuildCreate",
		Query:  BuildCreate_Operation,
		Variables: &__BuildCreateInput{
			Input: input,
		},
	}

	data_ = &BuildCreateResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetBuild.
const GetBuild_Operation = `
query GetBuild ($uuid: ID!) {
	build(uuid: $uuid) {
		... Build
	}
}
fragment Build on Build {
	uuid
	id
	number
	state
	jobs(first: 100) {
		edges {
			node {
				__typename
				... Job
			}
		}
	}
}
fragment Job on Job {
	... on JobTypeCommand {
		... CommandJob
	}
}
fragment CommandJob on JobTypeCommand {
	uuid
}
`

func GetBuild(
	ctx_ context.Context,
	client_ graphql.Client,
	uuid string,
) (data_ *GetBuildResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetBuild",
		Query:  GetBuild_Operation,
		Variables: &__GetBuildInput{
			Uuid: uuid,
		},
	}

	data_ = &GetBuildResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetBuilds.
const GetBuilds_Operation = `
query GetBuilds ($slug: ID!, $state: [BuildStates!], $first: Int) {
	pipeline(slug: $slug) {
		builds(state: $state, first: $first) {
			edges {
				node {
					... Build
				}
			}
		}
	}
}
fragment Build on Build {
	uuid
	id
	number
	state
	jobs(first: 100) {
		edges {
			node {
				__typename
				... Job
			}
		}
	}
}
fragment Job on Job {
	... on JobTypeCommand {
		... CommandJob
	}
}
fragment CommandJob on JobTypeCommand {
	uuid
}
`

func GetBuilds(
	ctx_ context.Context,
	client_ graphql.Client,
	slug string,
	state []BuildStates,
	first int,
) (data_ *GetBuildsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetBuilds",
		Query:  GetBuilds_Operation,
		Variables: &__GetBuildsInput{
			Slug:  slug,
			State: state,
			First: first,
		},
	}

	data_ = &GetBuildsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetJobEvents.
const GetJobEvents_Operation = `
query GetJobEvents ($jobId: ID!) {
	job(uuid: $jobId) {
		__typename
		... on JobTypeCommand {
			events(last: 100) {
				edges {
					node {
						__typename
						id
						type
						timestamp
						... on JobEventStackError {
							errorDetail
						}
					}
				}
			}
		}
	}
}
`

func GetJobEvents(
	ctx_ context.Context,
	client_ graphql.Client,
	jobId string,
) (data_ *GetJobEventsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetJobEvents",
		Query:  GetJobEvents_Operation,
		Variables: &__GetJobEventsInput{
			JobId: jobId,
		},
	}

	data_ = &GetJobEventsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by PipelineDelete.
const PipelineDelete_Operation = `
mutation PipelineDelete ($input: PipelineDeleteInput!) {
	pipelineDelete(input: $input) {
		clientMutationId
	}
}
`

// ## The following are used in the cleanup integration "test"
func PipelineDelete(
	ctx_ context.Context,
	client_ graphql.Client,
	input PipelineDeleteInput,
) (data_ *PipelineDeleteResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "PipelineDelete",
		Query:  PipelineDelete_Operation,
		Variables: &__PipelineDeleteInput{
			Input: input,
		},
	}

	data_ = &PipelineDeleteResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by SearchPipelines.
const SearchPipelines_Operation = `
query SearchPipelines ($slug: ID!, $search: String!, $first: Int!) {
	organization(slug: $slug) {
		pipelines(search: $search, first: $first) {
			edges {
				node {
					id
					name
				}
			}
		}
	}
}
`

func SearchPipelines(
	ctx_ context.Context,
	client_ graphql.Client,
	slug string,
	search string,
	first int,
) (data_ *SearchPipelinesResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "SearchPipelines",
		Query:  SearchPipelines_Operation,
		Variables: &__SearchPipelinesInput{
			Slug:   slug,
			Search: search,
			First:  first,
		},
	}

	data_ = &SearchPipelinesResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
